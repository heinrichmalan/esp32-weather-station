services:
  frontend:
    restart: always
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    command: npx serve -s build -l tcp://0.0.0.0:3000
    ports:
      - "3000:3000"
    depends_on:
      - backend


  backend:
    restart: always
    build:
      context: ./server
      dockerfile: ./Dockerfile
    command: gunicorn -w 4 -b 0.0.0.0:4000 wsgi:app
    ports:
      - "4000:4000"
    volumes:
      - ./server/:/app/:delegated
      - ./db/:/app/db
    depends_on:
      - db

  db:
    restart: always
    image: postgres:11.5-alpine
    volumes:
      - "db:/var/lib/postgresql/data"
    expose:
      - 5432
    environment:
      - POSTGRES_DB=sensorsdata
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U 'postgres' -d sensorsdata"]
      timeout: 10s
      interval: 20s
      retries: 3

  monitor:
    restart: always    
    build:
      context: ./monitor
      dockerfile: ./Dockerfile
    command: python3 mqtt_monitor.py
    volumes:
      - ./monitor/:/app/:delegated
      - ./db/:/app/db
    depends_on:
      - mqtt
      - db

  mqtt:
    restart: always
    build:
      context: ./mqtt
      dockerfile: ./Dockerfile
    expose:
      - 1883
    ports:
      - "1883:1883"

volumes:
  db:
